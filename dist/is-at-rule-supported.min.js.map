{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/is-at-rule-supported.js"],"names":["f","exports","module","define","amd","window","global","self","this","isAtRuleSupported","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","rule","support","prefixes","replace","atRe","toUpperCase","split","join","CSSRule"],"mappings":";CAAA,SAAAA,GAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,SAAA,GAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,OAAA,EAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,kBAAAT,KAAA,CAAA,WAAA,OAAA,SAAAU,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAf,GAAA,IAAAY,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAAjB,GAAAgB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAAA,MAAAI,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAV,EAAAG,GAAA,CAAAd,QAAA,IAAAU,EAAAI,GAAA,GAAAQ,KAAAD,EAAArB,QAAA,SAAAS,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAY,EAAAA,EAAArB,QAAAS,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAd,QAAA,IAAA,IAAAiB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAW,EAAA,CAAA,SAAAR,EAAAf,EAAAD,2ECYe,SAA2ByB,GACtC,IAAIC,GAAU,EACVH,EAASI,EAASJ,OACtBE,EAAOA,EAAKG,QAAQC,EAAM,IAAIC,cAAcC,MAAM,KAAKC,KAAK,KAAO,QACnE,MAAQN,GAAWH,KACfG,EAAWC,EAASJ,GAAUE,KAASQ,QAE3C,OAAOP,GAhBX,IAAMC,EAAW,CAAC,OAAQ,UAAW,KAAM,MAAO,IAC5CE,EAAO,sCDJb","file":"is-at-rule-supported.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * Common variables\n */\nconst prefixes = ['MOZ_', 'WEBKIT_', 'O_', 'MS_', ''];\nconst atRe = /^@/;\n\n/*\n * Feature test CSS at-rule support\n *\n * @param {String} rule\n * @return {Boolean}\n */\nexport default function isAtRuleSupported(rule) {\n    let support = false;\n    let length = prefixes.length;\n    rule = rule.replace(atRe, '').toUpperCase().split('-').join('_') + '_RULE';\n    while (!support && length--) {\n        support = (prefixes[length] + rule) in CSSRule;\n    }\n    return support;\n}\n"]}